# 设计模式 - 可复用的面向对象软件设计

PS: 这个笔记原来是来自李建忠的课程，再看则完全看不懂了，可见他的课都是在放屁，没有完整的代码，没有工程验证，光是空口把 gof 说成花还是一坨屎。

设计模式的核心是：复用。通常的学习C++程序员是偏向语言的底层信息，如内存模型、编译时运行时状态等，而设计模式关心的则是抽象，这里特别强调面向对象的设计模式、可复用的设计模式，因为在网络、数据库等领域都有各自的设计模式，在这里是不会专门去研究的。

设计模式要求将思维方式由分解（分而治之）到抽象转变。复用需要提取出逻辑的共性，用一种通用的方法统一处理，而将细节识别而忽视，这样再有变化的时候，可以复用已经存在的方式方法处理。

面向对象设计，为什么？

变化是复用的天地，面向对象设计最大的优势是抵御变化。

blabla，面向对象的设计原则(重要*，由原则得到模式，而不应该将设计模式像算法一样对待)

在变化处使用设计模式。


## Template Method

Application（A）、Library（L），A 的流程是稳定的，但是 A 调用 L 的一些函数，函数的行为是会变化的，将 A 稳定的流程写入到 L 中，封装为函数，并且将变化的函数标记为 virtual ，利用虚函数机制实现。

## 策略模式

动机：构建软件过程中，对象使用的算法多种多样，经常改变，如果将这些算法都写入到对象中，将会导致对象实现复杂，而且支持不使用的算法也是一个性能负担。策略模式是为了在运行时根据需要透明地修改算法，将算法与对象解耦，避免上述问题。

定义：定义一系列算法，把它们一个个封装起来，并且使它们可以相互替换（变化）。该模式使得算法可独立于使用它的客户程序（稳定）而变化（扩展，子类化）。

要点：1、提供了运行时算法切换；2、if...else...出现时考虑策略模式，除非判定条件绝对不变；3、strategy 对象没有实例变量，那么上下文可以共享一个strategy对象，从而节省对象开销。

PS： 代码复用的含义是指二进制复用，而非指程序源码复用，即增加功能的时候不是去修改源码，在终止当前程序后重新编译运行，二进制复用即热更新。

## 观察者/事件模式

软件构建过程中，对象间存在一种“通知依赖关系”，一个对象的状态发生改变，所有的依赖对象都将得到通知。这样的依赖关系过于紧密，将使软件不能很好抵御变化。

使用面向对象技术，可以将这种依赖关系弱化，使得生成何种通知、是否接收通知可控，从而实现软件体系结构的松耦合，把通知定义为接口，Application 继承这个接口，在App class中重写对接口的调用。

定义：定义对象间一种一对多（变）的依赖关系，以便当一个对象的状态发生变化时，所有依赖它的对象都得到通知并自动更新，产生一种松耦合的关系。

PS：在 C++ 及其它 OO 语言中，多继承因为可能导致过多 bug 而很少用（以前的例子菱形继承中需要虚继承），多继承往往是继承的类都是接口类（抽象基类）。

